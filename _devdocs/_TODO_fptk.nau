
// Polishing topics ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	- typecheck: with = or is, or type or smth?
	- correctly pass through extra args/kwargs (in partial and such)
	- iterator/generator/list/lazy (do not falsly consume iterators and such)
	- consistent namings of args
	- macro: hygensims

// ____________________________________________________________________________/ }}}1
// Bugs/Todos ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	- rest returns iterator, drop returns list, wtf
	- lbisect_by: option to include/exclude first found; negation in f in unclear
	- strip/lstrip/rstrip should also pass kwargs and such

	macros:
	- fm: is nesting working? 
	- fm: is combining with as-> working?

	• 1-based-indexing:
		- with dicts
		- range, lrange, range_, lrange_
		- assoc_
		- pick_
		- slice_/cut_ with 1 arg ?
		+ ncut_ ?

// ____________________________________________________________________________/ }}}1
// New functions ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾\ {{{1

	apl:
		+ funcy.interpose (str_join is for strings), inteleave (x1y2z3), interpose (x-y-z) // flatten(zip(..)) is enough?
		+ enlengthen_list
		+ append, prepend, insert
		+ [1 2 3] [a b c] -> [1 2 3 a] [b c]
	    + (flatten xs :level 3)
		+ dedup
		+ count_occurrences -> count_by, count_reps, count_elem
	    + (on_each f xs) -> None
	      // as map but actually calcs
	      // as lmap, but no result is returned
	    + applicators actually apply:
	      + juxt				-> apply_juxt		
	      + compose/rcompose	-> apply_compose
	      + nested				-> apply_nested		-> apply_n

	getters:
		+ getattr obj arg1 arg2
		+ attrget arg obj
		+ dataclass: replace (upd one field)
		+ add/substract lists/dictionaries

	debug:
		+ funcy.tap, ltap (listprint), tee

// ____________________________________________________________________________/ }}}1

